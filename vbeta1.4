# imports
import os
import pygame
from pygame import *
from pygame.locals import *
from random import randint
import time
# inits
pygame.init()

os.environ['SDL_VIDEO_CENTERED'] = '1'

screen_width = 800
screen_height = 500
screen = pygame.display.set_mode((screen_width, screen_height), 0, 0)
screen_game = pygame.display.set_mode((screen_width, screen_height), 0, 0)


def text_format(message, textFont, textSize, textColor):
    newFont = pygame.font.Font(textFont, textSize)
    newText = newFont.render(message, 0, textColor)
    return newText


white = (255, 255, 255)
black = (0, 0, 0)
gray = (50, 50, 50)
red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)
yellow = (255, 255, 0)
brown = (148, 93, 25)
happy_c = (214, 182, 24)
#lightblue = (134, 134, 255)

font = None

clock = pygame.time.Clock()
FPS = 30

path = "all/images/"

backrounds = [transform.scale(image.load(path + "bg.png"), (800, 500)),transform.scale(image.load(path + "game_bg.png"), (800, 500))]
right_sign = transform.scale(image.load(path + 'right.png'), (65, 65))
left_sign = transform.scale(image.load(path + 'left.png'), (65, 65))
right_sign_hover = transform.scale(image.load(path + 'right_hover.png'), (65, 65))
left_sign_hover = transform.scale(image.load(path + 'left_hover.png'), (65, 65))
remka = transform.scale(image.load(path + 'remka.png'), (75, 75))
# food images
bug = transform.scale(image.load(path + 'bug.png'),(50,50))
sworm = transform.scale(image.load(path + 'sworm.png'),(50,50))
red_apple = transform.scale(image.load(path + 'red_apple.png'),(50,50))
yellow_apple = transform.scale(image.load(path + 'yellow_apple.png'),(50,50))
mushroom = transform.scale(image.load(path + 'mushroom.png'),(50,50))
banana = transform.scale(image.load(path + 'banana.png'),(50,50))
heart = transform.scale(image.load(path + 'heart.png'), (50,50))
starve_e = transform.scale(image.load(path + 'food.png'), (75, 75))
smile = transform.scale(image.load(path + 'smile.png'), (75, 75))
# window settings
game = True
logiks = 100

tolkaninfo = 0

starve_p = 75
happiness_p = 75
healthy_p = 75

# time
tick = 1
is_ate = False
minus_st = False
# sprites
class GameSprite(sprite.Sprite):
    def __init__(self, player_image, player_x, player_y, width, height):
        super().__init__()
        self.width = width
        self.height = height
        self.image = transform.scale(image.load(player_image), (self.width, self.height))
        self.rect = self.image.get_rect()
        self.rect.x = player_x
        self.rect.y = player_y

    def reset(self):
        screen.blit(self.image, (self.rect.x, self.rect.y))

class HedgeHog(GameSprite):
    def __init__(self, player_image, player_x, player_y, width, height,tolkan, days_alive, age):
        super().__init__(player_image, player_x, player_y, width, height)
        self.age = age
        self.days_alive = days_alive
        self.tolkan = tolkan
    # def starving(self):
    #     global tick, is_ate, starve_p, healthy_p, minus_st
    #     global check_time
            
    # def eating(self):
    #     pass
    
    
    # def is_tolkan_full(self):
    #     global tolkaninfo
    #     if self.tolkan >= 100:
    #         self.health -= 1

    # '''def health(self):
    #     if self.health == 0:
    #         pass'''

hedgehog = HedgeHog(path+'happy_h.png',250,180,250,250,0,0,0)

food_group = sprite.Group()
food_market = sprite.Group()

food_index = 0

class Food(GameSprite):
    def __init__(self, player_image, player_x, player_y, width, height, food_status):
        super().__init__(player_image, player_x, player_y, width, height)
        self.food_status = food_status

food = Food(path+'yellow_apple.png',screen_width / 2.5, 360,150,150,0)
food2 = Food(path + 'red_apple.png', screen_width / 2.5, 360, 150, 150, 0)
food3 = Food(path + 'bug.png', screen_width / 2.5, 360, 150, 150, 0)

food_group.add(food2)
food_group.add(food)
food_group.add(food3)

# Game

game_screen = False
game = True
cont_open = False
selected = ""
selected_sign = ""
i = 0

signs = [left_sign,left_sign_hover,right_sign,right_sign_hover]
# main menu

while game:
    check_time = time.time()
    clock.tick(FPS)
    pygame.display.set_caption("Tamagocii")
    if game_screen == False:
        # Main Menu UI
        screen.blit(backrounds[0],(0,0))

        text_lan = text_format("ЯЗЫК", font, 55, black)

        title = text_format("Tamagoci", font, 90, yellow)
        if selected == "start":
            text_start = text_format("НОВАЯ ИГРА", font, 55, yellow)
        else:
            text_start = text_format("НОВАЯ ИГРА", font, 55, black)
        if selected == "quit":
            text_quit = text_format("ВЫХОД", font, 55, yellow)
        else:
            text_quit = text_format("ВЫХОД", font, 55, black)
        if selected == "control":
            text_control = text_format("УПРАВЛЕНИЕ", font, 55, yellow)
        else:
            text_control = text_format("УПРАВЛЕНИЕ", font, 55, black)
        if selected == "return":
            text_return = text_format("назад", font, 55, yellow)
        else:
            text_return = text_format("назад", font, 55, black)

        # controll text
        movement_text = text_format('To see info press : "TAB"', font, 35, black)  # TAB
        next_page_text = text_format('To see info press', font, 35, black)  #

        title_rect = title.get_rect()
        start_rect = Rect(screen_width / 2.3, 420, 200, 40)
        quit_rect = Rect(screen_width / 5, 420, 120, 40)
        control_rect = Rect(screen_width / 1.4, 420, 200, 40)
        return_rect = Rect(50, 20, 150, 40)

        # Main Menu Text
        if cont_open == False:
            screen.blit(title, (screen_width / 2 - (title_rect[2] / 2), 80))
            screen.blit(text_quit, ((screen_width / 5 - (start_rect[2] / 2), 420)))
            screen.blit(text_control, (screen_width / 1.4 - (quit_rect[2] / 2), 420))
            screen.blit(text_start, (screen_width / 2.35 - (start_rect[2] / 2), 420))
        elif cont_open:
            # hide text
            title_rect = title.get_rect()
            start_rect = Rect(screen_width / 2, 240, 0, 0)
            quit_rect = Rect(screen_width / 2, 360, 0, 0)
            control_rect = Rect(screen_width / 2, 300, 0, 0)
            return_rect = Rect(50, 20, 100, 40)

            # show controll_menu
            screen.blit(text_return, (50, 20,))
            screen.blit(movement_text, (70, 70))
            screen.blit(next_page_text, (70, 100))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game = False
            mouse_pos = pygame.mouse.get_pos()
            if start_rect.collidepoint(mouse_pos):
                selected = "start"
            if quit_rect.collidepoint(mouse_pos):
                selected = "quit"
            if control_rect.collidepoint(mouse_pos):
                selected = "control"
            if return_rect.collidepoint(mouse_pos):
                selected = "return"

            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                mouse_pos = event.pos
                if start_rect.collidepoint(mouse_pos):
                    selected = "start"
                    game_screen = True
                if quit_rect.collidepoint(mouse_pos):
                    selected = "quit"
                    game = False
                if control_rect.collidepoint(mouse_pos):
                    selected = "control"
                    cont_open = True
                if return_rect.collidepoint(mouse_pos):
                    selected = "return"
                    cont_open = False

        pygame.display.update()
    # game
    else:
        screen.blit(backrounds[1], (0, 0))
        healthbar = pygame.draw.rect(screen, green, pygame.Rect(screen_width / 3.2 , 0, 75, healthy_p))
        starve = pygame.draw.rect(screen, brown, pygame.Rect(screen_width / 2.2, 0, 75, starve_p))
        happiness_bg = pygame.draw.rect(screen, happy_c, pygame.Rect(screen_width / 1.7, 0, 75, healthy_p))
        health = Rect(screen_width / 2.2, 0, 75, 75)
        happiness = Rect(screen_width / 1.7, 0,75, 75)
        screen.blit(remka, (screen_width / 3.2, 0))
        screen.blit(heart, (screen_width /3.05, 17.5))
        screen.blit(remka, (screen_width / 2.2, 0))
        screen.blit(starve_e, (screen_width/2.2, 5))
        screen.blit(remka, (screen_width / 1.7, 0))
        screen.blit(smile, (screen_width/ 1.7, 2))
        hedgehog.reset()

        if minus_st == False:
            now = int(time.time()) 
            end = now + tick
            minus_st = True
        if minus_st == True:
            if check_time == end:
                starve_p -= 20
        if starve_p <= 0:
            healthy_p -= 5

        if selected_sign == 'left':
            screen.blit(signs[1], (screen_width / 3, 420))
        else:
            screen.blit(signs[0], (screen_width / 3, 420))
        if selected_sign == 'right':
            screen.blit(signs[2], (screen_width / 1.7, 420))
        else:
            screen.blit(signs[3], (screen_width / 1.7, 420))

        # hide text
        food_index2 = 0
        food_group.draw(screen)


        title_rect = title.get_rect()
        start_rect = Rect(screen_width / 2, 240, 0, 0)
        quit_rect = Rect(screen_width / 2, 360, 0, 0)
        control_rect = Rect(screen_width / 2, 300, 0, 0)
        return_rect = Rect(50, 20, 0, 0)
        #screen.blit(background, (0, 0))

        left_rect = Rect((screen_width / 3, 420, 65, 65))
        right_rect = Rect((screen_width / 1.7, 420, 65, 65))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game = False
            mouse_pos = pygame.mouse.get_pos()
            if right_rect.collidepoint(mouse_pos):
                print('Hi')
                selected_sign = 'right'
            if left_rect.collidepoint(mouse_pos):
                print('Hello')
                selected_sign = 'right'
            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                mouse_pos = event.pos
                if selected_sign == 'right':
                    if food_index > len(food_group):
                        food_index = 0
                        food_index2 = 0
                        for i in food_group:
                            i.rect.x = screen_width / 2.5
                            i.rect.y = 360
                            break
                    else:
                        for i in food_group:
                            if food_index == food_index2:
                                i.rect.x = screen_width / 2.5
                                i.rect.y = 360
                                i.reset()
                                break

                            food_index2 += 1
                            i.rect.x = 900
                            i.rect.y = 600
                        food_index += 1
                elif selected_sign == 'left':
                    if food_index < len(food_group) and food_index != 0:
                        food_index = 0
                        food_index2 = 0
                        for i in food_group:
                            i.rect.x = screen_width / 2.5
                            i.rect.y = 360
                            break
                    else:
                        for i in food_group:
                            if food_index == food_index2:
                                i.rect.x = screen_width / 2.5
                                i.rect.y = 360
                                i.reset()
                                break

                            food_index2 -= 1
                            i.rect.x = 900
                            i.rect.y = 600
                        food_index -= 1
        #pygame.display.flip()
        pygame.display.update()
